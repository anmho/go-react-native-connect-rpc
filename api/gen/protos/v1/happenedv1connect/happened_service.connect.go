// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/v1/happened_service.proto

package happenedv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "happenedapi/gen/protos/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HappenedServiceName is the fully-qualified name of the HappenedService service.
	HappenedServiceName = "happened_service.v1.HappenedService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HappenedServiceGreetProcedure is the fully-qualified name of the HappenedService's Greet RPC.
	HappenedServiceGreetProcedure = "/happened_service.v1.HappenedService/Greet"
	// HappenedServiceCreateEventProcedure is the fully-qualified name of the HappenedService's
	// CreateEvent RPC.
	HappenedServiceCreateEventProcedure = "/happened_service.v1.HappenedService/CreateEvent"
	// HappenedServiceGetUploadImageURLProcedure is the fully-qualified name of the HappenedService's
	// GetUploadImageURL RPC.
	HappenedServiceGetUploadImageURLProcedure = "/happened_service.v1.HappenedService/GetUploadImageURL"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	happenedServiceServiceDescriptor                 = v1.File_protos_v1_happened_service_proto.Services().ByName("HappenedService")
	happenedServiceGreetMethodDescriptor             = happenedServiceServiceDescriptor.Methods().ByName("Greet")
	happenedServiceCreateEventMethodDescriptor       = happenedServiceServiceDescriptor.Methods().ByName("CreateEvent")
	happenedServiceGetUploadImageURLMethodDescriptor = happenedServiceServiceDescriptor.Methods().ByName("GetUploadImageURL")
)

// HappenedServiceClient is a client for the happened_service.v1.HappenedService service.
type HappenedServiceClient interface {
	Greet(context.Context, *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error)
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetUploadImageURL(context.Context, *connect.Request[v1.GetUploadImageURLRequest]) (*connect.Response[v1.GetUploadImageURLResponse], error)
}

// NewHappenedServiceClient constructs a client for the happened_service.v1.HappenedService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHappenedServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HappenedServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &happenedServiceClient{
		greet: connect.NewClient[v1.GreetRequest, v1.GreetResponse](
			httpClient,
			baseURL+HappenedServiceGreetProcedure,
			connect.WithSchema(happenedServiceGreetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+HappenedServiceCreateEventProcedure,
			connect.WithSchema(happenedServiceCreateEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUploadImageURL: connect.NewClient[v1.GetUploadImageURLRequest, v1.GetUploadImageURLResponse](
			httpClient,
			baseURL+HappenedServiceGetUploadImageURLProcedure,
			connect.WithSchema(happenedServiceGetUploadImageURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// happenedServiceClient implements HappenedServiceClient.
type happenedServiceClient struct {
	greet             *connect.Client[v1.GreetRequest, v1.GreetResponse]
	createEvent       *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	getUploadImageURL *connect.Client[v1.GetUploadImageURLRequest, v1.GetUploadImageURLResponse]
}

// Greet calls happened_service.v1.HappenedService.Greet.
func (c *happenedServiceClient) Greet(ctx context.Context, req *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error) {
	return c.greet.CallUnary(ctx, req)
}

// CreateEvent calls happened_service.v1.HappenedService.CreateEvent.
func (c *happenedServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// GetUploadImageURL calls happened_service.v1.HappenedService.GetUploadImageURL.
func (c *happenedServiceClient) GetUploadImageURL(ctx context.Context, req *connect.Request[v1.GetUploadImageURLRequest]) (*connect.Response[v1.GetUploadImageURLResponse], error) {
	return c.getUploadImageURL.CallUnary(ctx, req)
}

// HappenedServiceHandler is an implementation of the happened_service.v1.HappenedService service.
type HappenedServiceHandler interface {
	Greet(context.Context, *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error)
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	GetUploadImageURL(context.Context, *connect.Request[v1.GetUploadImageURLRequest]) (*connect.Response[v1.GetUploadImageURLResponse], error)
}

// NewHappenedServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHappenedServiceHandler(svc HappenedServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	happenedServiceGreetHandler := connect.NewUnaryHandler(
		HappenedServiceGreetProcedure,
		svc.Greet,
		connect.WithSchema(happenedServiceGreetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	happenedServiceCreateEventHandler := connect.NewUnaryHandler(
		HappenedServiceCreateEventProcedure,
		svc.CreateEvent,
		connect.WithSchema(happenedServiceCreateEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	happenedServiceGetUploadImageURLHandler := connect.NewUnaryHandler(
		HappenedServiceGetUploadImageURLProcedure,
		svc.GetUploadImageURL,
		connect.WithSchema(happenedServiceGetUploadImageURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/happened_service.v1.HappenedService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HappenedServiceGreetProcedure:
			happenedServiceGreetHandler.ServeHTTP(w, r)
		case HappenedServiceCreateEventProcedure:
			happenedServiceCreateEventHandler.ServeHTTP(w, r)
		case HappenedServiceGetUploadImageURLProcedure:
			happenedServiceGetUploadImageURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHappenedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHappenedServiceHandler struct{}

func (UnimplementedHappenedServiceHandler) Greet(context.Context, *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("happened_service.v1.HappenedService.Greet is not implemented"))
}

func (UnimplementedHappenedServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("happened_service.v1.HappenedService.CreateEvent is not implemented"))
}

func (UnimplementedHappenedServiceHandler) GetUploadImageURL(context.Context, *connect.Request[v1.GetUploadImageURLRequest]) (*connect.Response[v1.GetUploadImageURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("happened_service.v1.HappenedService.GetUploadImageURL is not implemented"))
}
